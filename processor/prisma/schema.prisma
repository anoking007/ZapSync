// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or "sqlite", "mysql", etc.
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String // Store hashed passwords!
  zaps      Zap[]
}

model Zap {
  id        String    @id @default(uuid())
  userId    String//triggerId
  user      User      @relation(fields: [userId], references: [id])
  // This `trigger` field is the back-reference from the `Trigger` model.
  // The `Trigger` model now 'owns' the foreign key `zapId` for the 1-to-1 relation.
  trigger   Trigger? // CORRECT: No fields, references, or onDelete here.
  actions   Action[]

  ZapRun ZapRun[]
}

model Trigger {
  id                String           @id @default(uuid())
  zapId             String           @unique // CORRECT: This is the foreign key for the 1-to-1. It must be unique.
  zap               Zap              @relation(fields: [zapId], references: [id], onDelete: Cascade) // CORRECT: Define fields, references, and onDelete here.
  availableTriggerId String        // triggerId
  availableTrigger  AvailableTrigger @relation(fields: [availableTriggerId], references: [id]) //triggerId
  metadata          Json?
  triggerEvents     TriggerEvent[]
}

model AvailableTrigger {
  id          String    @id @default(uuid())
  name        String    @unique // e.g., "Webhook", "GitHub", "Google Sheets"
  triggers    Trigger[]
  metadata    Json?     // Example: default config for this available trigger type
}

model TriggerEvent {
  id           String    @id @default(uuid())
  triggerId    String
  trigger      Trigger   @relation(fields: [triggerId], references: [id])
  payload      Json      // The actual data received from the webhook/trigger
  status       String    @default("PENDING") // e.g., "PENDING", "PROCESSING", "COMPLETED", "FAILED"
  createdAt    DateTime  @default(now())
  processedAt  DateTime?

  outboxId     String?   @unique
  outbox       Outbox?   @relation(fields: [outboxId], references: [id])
}

model Outbox {
  id          String         @id @default(uuid())
  eventType   String         // e.g., "TriggerEvent.Created", "ZapRun.Started"
  payload     Json           // The data to be sent to the message broker
  createdAt   DateTime       @default(now())
  processed   Boolean        @default(false)
  processedAt DateTime?

  triggerEvent TriggerEvent?
}

model AvailableAction {
  id        String    @id @default(uuid())
  name      String    @unique // e.g., "Send Email", "Dispense Solana", "Post Slack Message"
  actions   Action[]
  metadata  Json?     // Example: default config for this available action type
}

model Action {
    id                String          @id @default(uuid())
    zapId             String
    zap               Zap             @relation(fields: [zapId], references: [id])
    order             Int             // To define the order of actions within a Zap
    availableActionId String
    availableAction   AvailableAction @relation(fields: [availableActionId], references: [id])
    // Specific configuration for *this instance* of the action
    metadata          Json?           // e.g., for email, the recipient email, subject, body template
}

model ZapRun {
  id        String    @id @default(uuid())
  zapId     String
  zap       Zap       @relation(fields: [zapId], references: [id])
  metadata  Json      // The full payload received from the trigger (e.g., webhook body)
  status    String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  createdAt DateTime  @default(now())
  completedAt DateTime?

  outbox    ZapRunOutbox? // One-to-one relationship with the outbox table for this run
}

// Outbox table for ZapRun events specifically
model ZapRunOutbox {
  id          String    @id @default(uuid())
  zapRunId    String    @unique // Ensure one-to-one with ZapRun
  zapRun      ZapRun    @relation(fields: [zapRunId], references: [id])
  eventType   String    @default("ZapRun.Started") // Or other types like ZapRun.Completed
  payload     Json
  createdAt   DateTime  @default(now())
  processed   Boolean   @default(false)
  processedAt DateTime?
}